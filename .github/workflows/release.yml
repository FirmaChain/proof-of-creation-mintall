name: Auto Versioning & Release

on:
  push:
    branches:
      - develop
      - master
      - 'hotfix/*' # Allow hotfix branches to trigger

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all history and tags are available

      - name: Fetch all tags
        run: |
          git config remote.origin.fetch "+refs/tags/*:refs/tags/*"
          git fetch --prune --tags

      - name: Debug Tag List
        run: |
          echo "==== Available Tags ===="
          git tag --list --sort=-v:refname | head -n 10

      - name: Get latest tag
        id: latest-tag
        run: |
          # Get repository name
          REPO_NAME=$(basename $GITHUB_REPOSITORY)

          # Get the latest vX.X.X or vX.X.X-dev.X version
          LATEST_TAG=$(git tag --list "v[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)

          # If there is no tag, initialize v0.0.0
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi

          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Determine version bump (major, minor, patch)
        id: version-bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Extract base version number
          BASE_VERSION=$(echo $LATEST_TAG | sed -E 's/v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)
          PATCH=$(echo $BASE_VERSION | cut -d. -f3)

          # Version increment logic
          if [[ "${GITHUB_REF}" == refs/heads/hotfix/* ]]; then
            PATCH=$((PATCH + 1))
            echo "Hotfix detected, forcing patch bump."
          elif echo "$COMMIT_MSG" | grep -qiE "^major:"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -qiE "^feat:"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -qiE "^fix:"; then
            PATCH=$((PATCH + 1))
          else
            echo "No version bump keyword found. Skipping tag creation."
            exit 0
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Generate new tag
        id: new-tag
        run: |
          if [[ -z "${NEW_VERSION}" ]]; then
            echo "No new version generated, skipping."
            exit 1
          fi

          # Process dev version number
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            DEV_COUNT=$(git tag --list "${NEW_VERSION}-dev.*" | grep -Eo '[0-9]+$' | sort -n | tail -n 1)
            if [[ -z "$DEV_COUNT" ]]; then
              DEV_COUNT=0
            fi
            NEW_TAG="${NEW_VERSION}-dev.$((DEV_COUNT + 1))"
          else
            NEW_TAG="${NEW_VERSION}"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Generated tag: $NEW_TAG"

      - name: Create and push new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          if [[ -z "${{ env.NEW_TAG }}" ]]; then
            echo "No new tag generated, skipping push."
            exit 1
          fi

          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }} || (echo "Tag push failed, checking if it already exists..." && git fetch --tags && git tag -l | grep -q "^${{ env.NEW_TAG }}$" && echo "Tag already exists, skipping push" || exit 1)

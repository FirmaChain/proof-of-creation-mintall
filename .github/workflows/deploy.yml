name: Deploy to Server from AWS ECR

on:
  # when a new tag is pushed
  push:
    tags:
      - 'v*'
  # when the Build workflow is completed
  workflow_run:
    workflows: ['Build and Push to AWS ECR']
    types:
      - completed
    branches:
      - master
      - develop

jobs:
  deploy:
    # if the Build workflow is completed
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-dev.') && 'production' || 'development' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract GitHub Tag
        id: tag
        run: |
          if [[ $GITHUB_EVENT_NAME == "workflow_run" ]]; then
            # Get all tags
            git fetch --tags
            # Get the latest tag
            TAG=$(git describe --tags --abbrev=0)
            echo "latest tag: $TAG"
            echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          else
            # Get tag from the pushed tag
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Will use tag: ${{ env.IMAGE_TAG }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine image tag for deployment
        id: determine-tag
        run: |
          # If the environment is production and does not contain a development marker, use the latest tag
          if [[ "${{ env.IMAGE_TAG }}" != *-dev.* && "${{ env.IMAGE_TAG }}" != *-alpha.* && "${{ env.IMAGE_TAG }}" != *-beta.* ]]; then
            DEPLOY_TAG="latest"
            echo "Deploy production version, use tag: latest"
          else
            DEPLOY_TAG="${{ env.IMAGE_TAG }}"
            echo "Deploy development version, use tag: $DEPLOY_TAG"
          fi
          echo "DEPLOY_TAG=$DEPLOY_TAG" >> $GITHUB_ENV

      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Start to deploy image: ${{ env.DEPLOY_TAG }}"
            
            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # Pull image
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.DEPLOY_TAG }}

            # Stop and remove old container
            docker stop nestjs-app || true
            docker rm nestjs-app || true

            # Run new container
            docker run -d --name nestjs-app -p 3000:3000 \
              --restart unless-stopped \
              -e NODE_ENV=${{ env.IMAGE_TAG == 'latest' && 'production' || 'development' }} \
              ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.DEPLOY_TAG }}
            
            echo "Deploy completed"

name: Build and Push to AWS ECR

on:
  # When a new tag is pushed
  push:
    tags:
      - 'v*'
  # When the Semantic Release workflow is completed
  workflow_run:
    workflows: ['Semantic Release']
    types:
      - completed
    branches:
      - master
      - develop

jobs:
  build:
    # If the workflow is triggered by a tag, it will run
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: fig-devnet-server
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-dev.') && 'production' || 'development' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get repository name
        id: repo-name
        run: |
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "Repository name: $REPO_NAME"

      - name: Extract GitHub Tag and Branch
        id: tag
        run: |
          if [[ $GITHUB_EVENT_NAME == "workflow_run" ]]; then
            # Get all tags and ensure they are the latest
            git fetch --tags --force
            
            # Determine branch
            if [[ "${{ github.event.workflow_run.head_branch }}" == "master" ]]; then
              echo "BRANCH=master" >> $GITHUB_ENV
              
              # For master branch, get the latest tag without -dev suffix
              TAG=$(git tag --sort=-v:refname | grep -v "\-dev\." | head -n 1)
              if [ -z "$TAG" ]; then
                # If no non-dev tag is found, use any latest tag
                TAG=$(git tag --sort=-v:refname | head -n 1)
              fi
            else
              echo "BRANCH=develop" >> $GITHUB_ENV
              
              # For develop branch, get the latest tag with -dev suffix
              TAG=$(git tag --sort=-v:refname | grep "\-dev\." | head -n 1)
              if [ -z "$TAG" ]; then
                # If no dev tag is found, use any latest tag
                TAG=$(git tag --sort=-v:refname | head -n 1)
              fi
            fi
            
            echo "Latest tag found: $TAG"
            echo "GITHUB_TAG=$TAG" >> $GITHUB_ENV
          else
            # Get tag from pushed tag
            echo "GITHUB_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            
            # Determine branch from tag format
            if [[ "${GITHUB_REF#refs/tags/}" == *-dev.* ]]; then
              echo "BRANCH=develop" >> $GITHUB_ENV
            else
              echo "BRANCH=master" >> $GITHUB_ENV
            fi
          fi
          echo "GitHub tag: ${{ env.GITHUB_TAG }}"
          echo "Branch: ${{ env.BRANCH }}"

      - name: Create custom image tag with repo name
        run: |
          # If master branch, use -prod suffix
          if [[ "${{ env.BRANCH }}" == "master" ]]; then
            # Extract version number without any suffix
            VERSION=$(echo "${{ env.GITHUB_TAG }}" | sed -E 's/v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            echo "BASE_VERSION=$VERSION" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ env.REPO_NAME }}.v${VERSION}-prod" >> $GITHUB_ENV
          else
            # For develop branch, keep existing format
            echo "IMAGE_TAG=${{ env.REPO_NAME }}.${{ env.GITHUB_TAG }}" >> $GITHUB_ENV
          fi
          echo "Will use image tag: ${{ env.IMAGE_TAG }}"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.DEV_AWS_REGION }}

      # - name: Log in to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      - name: Log in to Amazon ECR manually
        run: |
          aws ecr get-login-password --region ap-southeast-1 | \
          docker login --username AWS --password-stdin 681301424914.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Build and push Docker image
        run: |
          echo "Building image: ${{ env.IMAGE_TAG }}"
          docker build -t ${{ secrets.ECR_URI }}:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.ECR_URI }}:${{ env.IMAGE_TAG }}

      - name: Notify success for deploy trigger
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Build successful, triggering deploy..."
